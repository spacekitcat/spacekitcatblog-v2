// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots Atoms Color palette 1`] = `
<div
  className="colorpalette"
>
  <div
    className="colorpalette__swatch colorpalette__swatch--simply-red"
  />
  <div
    className="colorpalette__swatch colorpalette__swatch--green-sally-up"
  />
  <div
    className="colorpalette__swatch colorpalette__swatch--all-yellow"
  />
  <div
    className="colorpalette__swatch colorpalette__swatch--fade-to-grey"
  />
  <div
    className="colorpalette__swatch colorpalette__swatch--dancing-in-the-dark"
  />
  <div
    className="colorpalette__swatch colorpalette__swatch--blue-monday"
  />
  <div
    className="colorpalette__swatch colorpalette__swatch--white-wedding"
  />
</div>
`;

exports[`Storyshots Atoms Logo text 1`] = `
<h1
  className="logotext"
>
  <span
    className="logotext__first-word"
  >
    SPACE
  </span>
  <span
    className="logotext__second-word"
  >
    KIT
  </span>
  <span
    className="logotext__third-word"
  >
    CAT
  </span>
</h1>
`;

exports[`Storyshots Atoms Typography 1`] = `
<div
  className="typographypreview"
>
  <div
    className="typographypreview__view"
  >
    <div
      className="typographypreview__label"
    >
      five
    </div>
    <div
      className="typographypreview__font typographypreview__font--five"
    >
      SPACEKITCAT
    </div>
  </div>
  <div
    className="typographypreview__view"
  >
    <div
      className="typographypreview__label"
    >
      eight
    </div>
    <div
      className="typographypreview__font typographypreview__font--eight"
    >
      SPACEKITCAT
    </div>
  </div>
  <div
    className="typographypreview__view"
  >
    <div
      className="typographypreview__label"
    >
      ten
    </div>
    <div
      className="typographypreview__font typographypreview__font--ten"
    >
      SPACEKITCAT
    </div>
  </div>
</div>
`;

exports[`Storyshots Molecules Logo 1`] = `
<div
  className="logo"
>
  <h1
    className="logotext logotext--before"
  >
    <span
      className="logotext__first-word"
    >
      SPACE
    </span>
    <span
      className="logotext__second-word"
    >
      KIT
    </span>
    <span
      className="logotext__third-word"
    >
      CAT
    </span>
  </h1>
  <h1
    className="logotext"
  >
    <span
      className="logotext__first-word"
    >
      SPACE
    </span>
    <span
      className="logotext__second-word"
    >
      KIT
    </span>
    <span
      className="logotext__third-word"
    >
      CAT
    </span>
  </h1>
  <h1
    className="logotext logotext--after"
  >
    <span
      className="logotext__first-word"
    >
      SPACE
    </span>
    <span
      className="logotext__second-word"
    >
      KIT
    </span>
    <span
      className="logotext__third-word"
    >
      CAT
    </span>
  </h1>
</div>
`;

exports[`Storyshots Organisms SuperNavBar 1`] = `
<div
  className="supernavbar"
>
  <p
    className="supernavbar__text"
  >
    <span
      aria-label="Logo, a small rocket emoji"
      role="img"
    />
     SPACEKITCAT
  </p>
</div>
`;

exports[`Storyshots Organisms TopicPreview 1`] = `
<div
  className="topicpreview"
>
  <h1
    className="topicpreview__title"
  >
    <a
      href="#nowehere"
    >
      Bowser based fan fic
    </a>
  </h1>
  <p
    className="topicpreview__text"
  >
    Explore the epic world of Bowser
  </p>
</div>
`;

exports[`Storyshots Pages Landing page 1`] = `
<div
  className="landingpage"
>
  <div
    className="supernavbar"
  >
    <p
      className="supernavbar__text"
    >
      <span
        aria-label="Logo, a small rocket emoji"
        role="img"
      />
       SPACEKITCAT
    </p>
  </div>
  <div
    className="landingpage__contentlist"
  >
    <div
      className="topicpreview"
    >
      <h1
        className="topicpreview__title"
      >
        <a
          href="https://github.com/spacekitcat/libz77"
        >
          LZ77 compression algorothm exploration
        </a>
      </h1>
      <p
        className="topicpreview__text"
      >
        A NodeJS implementation of the LZ77 compression algorothm, I had a curiosity about the Sliding Window technique. I still have to implement a robust, space efficient binary serialisation format for it to work in a usable way. The code, as it stands, provides a small demonstration program which accepts a string argument and generates the compression packets for the input.
      </p>
    </div>
    <div
      className="topicpreview"
    >
      <h1
        className="topicpreview__title"
      >
        <a
          href="https://github.com/spacekitcat/hackertextjs"
        >
          Pure text Matrix-esque animation experiments
        </a>
      </h1>
      <p
        className="topicpreview__text"
      >
        Hackertextjs is a widget library for creating a Matrix-esque animation effect within arbitrary HTML text elements. The animation text content of each frame is created one character at a time, the frame generator randomly decides to use underscores or the next character in the string provided by the client code. The probability of the renderer decisions are controlled by the noise ratio, a high noise ratio increases the likelyhood of it selecting an underscore. The client code can configure the renderer to generate a random noise ratio for each frame or it can ask it to use the SIN or COS function to calculate the noise ratio. Using SIN or COS obviously causes the value of the noise ratio to generate a wave effect. The client code tells the library how many rows of text to generate, and it carefully calculates the exact number of characters, so that each row has the exact same length. That last part was difficult and required a frustrating amount of trial and error.
      </p>
    </div>
    <div
      className="topicpreview"
    >
      <h1
        className="topicpreview__title"
      >
        <a
          href="https://github.com/spacekitcat/example-lambda-project"
        >
          AWS Lambda exploration
        </a>
      </h1>
      <p
        className="topicpreview__text"
      >
        Created as a learning exercise. The project uses AWS Lambda, API Gateway, Cloudformation and CodeBuild to provide an endpoint which returns random quotes. The repository automatically builds and deploys itself via CloudFormation. The deploy is 90% automatic, but there are one or two small manual steps required at the moment.
      </p>
    </div>
  </div>
</div>
`;

exports[`Storyshots Templates Landing page 1`] = `
<div
  className="landingpage"
>
  <div
    className="supernavbar"
  >
    <p
      className="supernavbar__text"
    >
      <span
        aria-label="Logo, a small rocket emoji"
        role="img"
      />
       SPACEKITCAT
    </p>
  </div>
  <div
    className="landingpage__contentlist"
  >
    <div
      className="topicpreview"
    >
      <h1
        className="topicpreview__title"
      >
        <a
          href="#pulp"
        >
          Common People
        </a>
      </h1>
      <p
        className="topicpreview__text"
      >
        She came from Greece, she had a thirst for knowledge.
      </p>
    </div>
    <div
      className="topicpreview"
    >
      <h1
        className="topicpreview__title"
      >
        <a
          href="#pixies"
        >
          Hey
        </a>
      </h1>
      <p
        className="topicpreview__text"
      >
        Hey. Been trying to meet you. Hey. Must be a devil between us.
      </p>
    </div>
  </div>
</div>
`;
